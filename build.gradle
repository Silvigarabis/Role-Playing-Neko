plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

println "RolePlayingNeko " + version

ext {
    core_project = project(":core")

    enabled_platforms = getProperty("platforms").tokenize(',').collect { it.trim() }
    enabled_platform_projects = enabled_platforms.collect { project(":" + it) }

    ctlib_modrinth_project_id = properties["ctlib_modrinth_project_id"]
    ctlib_version = properties["ctlib_version"]

}

println "platform(s) that enabled: " + enabled_platforms

subprojects { project ->
    def isPlatformProject = project in enabled_platform_projects

    apply plugin: "java"
    if (isPlatformProject){
        apply plugin: "com.github.johnrengelman.shadow"
    }

    repositories {
        mavenCentral()
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
    }

    group = properties["maven_group"] as String
    version = properties["version"] as String + "+" + project.name
    description = properties["description"] as String
    archives_base_name = properties["archives_base_name"] as String

    base {
        archivesName = project.archives_base_name
    }

    dependencies {
        implementation 'org.jetbrains:annotations:24.0.0'
        if (isPlatformProject){
            implementation(core_project)
        }
    }

}

enabled_platform_projects.each { project ->
    def coreJarTask = core_project.tasks.getByName('jar')

    project.tasks.getByName('shadowJar') {
        // 在 :core:jar 后运行
        mustRunAfter coreJarTask

        // 添加 core
        from coreJarTask.outputs.files.singleFile

        // 配置shadowJar任务不包含任何依赖
        configurations = []

        // 文件无额外后缀
        archiveClassifier = ""
    }

    project.tasks.named('build') {
        dependsOn project.tasks.named('shadowJar')
    }
}

task build(type: Copy) {
    mustRunAfter( subprojects.collect { it.tasks.named('build') } )

    def jarTasks = [ "jar", "remapJar", "sourcesJar", "javadocJar" ]
    jarTasks.each { jarTask ->
        subprojects.each { project ->
            if (project.tasks.findByPath(jarTask)){
                from(project.tasks.getByName(jarTask).outputs.files.singleFile)
            }
        }
    }
    into "$rootDir/out"
}
