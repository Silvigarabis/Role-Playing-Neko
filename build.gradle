plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

println "RolePlayingNeko " + version

ext {
    core_project = project(":core")
    configloader_project = project(":configloader")

    enabled_platforms = getProperty("platforms").tokenize(',').collect { it.trim() }
    enabled_platform_projects = enabled_platforms.collect { project(":platform_" + it) }
    platform_types = new HashMap();

    ctlibmod_version = properties["ctlibmod_version"]

    everyprojects = allprojects
}

enabled_platforms.each { platform ->
    platform_types.put(project(":platform_" + platform), platform);
}

println "platform(s) that enabled: " + enabled_platforms

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-Xlint:deprecation']
    }
}

subprojects { project ->
    def isPlatformProject = project in enabled_platform_projects
    def isConfigLoaderProject  = project.name.startsWith("configloader")

    apply plugin: "java"
    if (isPlatformProject){
        apply plugin: "com.github.johnrengelman.shadow"
    }

    repositories {
        mavenCentral()
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
    }

    group = properties["maven_group"] as String
    if (isPlatformProject){
        version = properties["version"] as String + "+" + platform_types.get(project)
    } else {
        version = properties["version"] as String + "+" + project.name
    }
    description = properties["description"] as String
    archives_base_name = properties["archives_base_name"] as String

    base {
        archivesName = archives_base_name
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:24.0.0'
        compileOnly "maven.modrinth:ctlibmod:${ctlibmod_version}"

        if (isPlatformProject){
            implementation(configloader_project)
            implementation(core_project)
            shadow(configloader_project)
            shadow(core_project)
        }
        if (isConfigLoaderProject){
            compileOnly(core_project) {}
        }
    }

}

enabled_platform_projects.each { project ->
    project.tasks.getByName('shadowJar') {
        configurations = [project.configurations.shadow]

        archiveClassifier = ""

        mustRunAfter ":configloader:shadowJar"
    }

    project.tasks.getByName("build") {
        dependsOn project.tasks.getByName('shadowJar')
    }
}

task build(type: Copy) {
    mustRunAfter( subprojects.collect { it.tasks.named('build') } )

    def jarTasks = [ "jar", "remapJar", "sourcesJar", "javadocJar" ]
    jarTasks.each { jarTask ->
        subprojects.each { project ->
            if (project.tasks.findByPath(jarTask)){
                from(project.tasks.getByName(jarTask).outputs.files.singleFile)
            }
        }
    }
    into "$rootDir/out"
}
