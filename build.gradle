plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

println "RolePlayingNeko " + version

ext {
    enabled_platforms = getProperty("platforms").tokenize(',').collect { it.trim() }
    enabled_platform_projects = enabled_platforms.collect { project(":platform_" + it) }

    everyprojects = allprojects

    enabled_platforms.each { platform_name ->
        def platform_project = project(":platform_" + platform_name)
        platform_project.ext.platform_type = platform_name
    }

    group = properties["maven_group"]
    description = properties["description"]
    archives_base_name = properties["archives_base_name"]
    version = properties["version"]
    author = properties["author"]
    website = properties["website"]
    issues = properties["issues"]
    authors = properties["authors"] as String
    contributors = properties["contributors"] as String
}

println "platform(s) that enabled: " + enabled_platforms

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-Xlint:deprecation']
    }
}

subprojects {
    apply plugin: "java"

    dependencies {
        compileOnly 'org.jetbrains:annotations:24.0.0'
    }

    base {
        archivesName = archives_base_name
    }
}

subprojects { platform_project ->
    if (!(platform_project in enabled_platform_projects)){
        return;
    }

    println "configuring platform " + platform_project.ext.platform_type

    apply plugin: "com.github.johnrengelman.shadow"

    version = properties["version"] + "+" + platform_type

    dependencies {
        implementation(project(":core"))
        shadow(project(":core"))
    }

    shadowJar {
        configurations = [configurations.shadow]

        archiveClassifier = ""
    }

    processResources {
        filesMatching(["fabric.mod.json", "plugin.yml"]) {
            expand([
                "version": version,
                "description": description,
                "author": author,
                "authors": authors,
                "contributors": contributors,
                "website": website,
                "issues": issues,
                "project_id": project_id,
                "project_name": project_name
            ])
        }
    }

    build {
        dependsOn "shadowJar"
    }
}

task build(type: Copy) {
    dependsOn enabled_platform_projects.collect { it.tasks.named("build") }

    def jarTasks = [ "jar", "remapJar", "sourcesJar", "javadocJar" ]
    jarTasks.each { jarTask ->
        subprojects.each { project ->
            if (project.tasks.findByPath(jarTask)){
                from(project.tasks.getByName(jarTask).outputs.files.singleFile)
            }
        }
    }
    into "$rootDir/out"
}
